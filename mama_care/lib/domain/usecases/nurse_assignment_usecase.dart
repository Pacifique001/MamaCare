// lib/domain/usecases/nurse_assignment_usecase.dart (NEW FILE or relevant use case file)

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';
import 'package:mama_care/data/repositories/nurse_assignment_repository.dart';
import 'package:mama_care/domain/entities/nurse_assignment.dart';
import 'package:mama_care/core/error/exceptions.dart';
import 'package:mama_care/domain/entities/user_role.dart';
import 'package:mama_care/data/repositories/user_repository.dart'; // Import exceptions

@injectable
class NurseAssignmentUseCase {
  final NurseAssignmentRepository _repository;
  final UserRepository _userRepository;
  final Logger _logger;

  NurseAssignmentUseCase(this._repository, this._logger, this._userRepository);

  /// Gets nurse assignments related to a specific doctor.
  Future<List<NurseAssignment>> getAssignmentsForDoctor(String doctorId) async {
    _logger.d("UseCase: Getting nurse assignments for doctor $doctorId");
    try {
      // Basic validation
      if (doctorId.isEmpty) {
        throw InvalidArgumentException("Doctor ID cannot be empty.");
      }
      final assignments = await _repository.getAssignmentsForDoctor(doctorId);
      _logger.i(
        "UseCase: Retrieved ${assignments.length} nurse assignments for doctor $doctorId",
      );
      return assignments;
    } on InvalidArgumentException catch (e) {
      // Catch specific validation errors
      _logger.w(
        "UseCase: Invalid argument for getAssignmentsForDoctor",
        error: e,
      );
      rethrow; // Let ViewModel handle specific message
    } catch (e, stackTrace) {
      // Catch repository or other errors
      _logger.e(
        "UseCase: Failed to get nurse assignments for doctor $doctorId",
        error: e,
        stackTrace: stackTrace,
      );
      // Rethrow the original (likely specific) exception from the repo,
      // or wrap in a DomainException if needed.
      rethrow;
    }
  }

  // --- ADDED createAssignment Use Case Method ---
  /// Creates a new assignment, fetching necessary names first.
  Future<String> createAssignment({
    required String nurseId,
    required String patientId,
    required String doctorId, // ID of doctor performing action
    String? notes,
  }) async {
    _logger.d(
      "UseCase: Creating assignment: Patient '$patientId' -> Nurse '$nurseId' by Doctor '$doctorId'",
    );
    try {
      // 1. Validate IDs
      if (nurseId.isEmpty || patientId.isEmpty || doctorId.isEmpty) {
        throw InvalidArgumentException(
          "Nurse, Patient, and Doctor IDs cannot be empty.",
        );
      }

      // 2. Fetch User Details for Names (Denormalization)
      final nurse = await _userRepository.getUserById(nurseId);
      final patient = await _userRepository.getUserById(patientId);
      // We don't necessarily need the doctor's name stored in the assignment itself

      if (nurse == null)
        throw DataNotFoundException(
          "Nurse not found",
          resourceIdentifier: nurseId,
        );
      if (patient == null)
        throw DataNotFoundException(
          "Patient not found",
          resourceIdentifier: patientId,
        );
      // Optionally verify roles
      if (nurse.role != UserRole.nurse)
        throw InvalidArgumentException("Selected user is not a nurse.");
      if (patient.role != UserRole.patient)
        throw InvalidArgumentException("Selected user is not a patient.");

      // 3. Create the Assignment Entity
      final assignment = NurseAssignment(
        // ID will be generated by Firestore, so we don't provide one here
        // Or pass null/empty and let the fromFirestore handle it if needed
        id: '', // Placeholder, repository handles actual ID generation
        nurseId: nurseId,
        nurseName: nurse.name, // Use fetched name
        patientId: patientId,
        patientName: patient.name, // Use fetched name
        doctorId: doctorId,
        assignedAt: Timestamp.now(), // Placeholder, repository uses server time
        notes: notes?.trim().isEmpty ?? true ? null : notes!.trim(),
      );

      // 4. Call Repository to save
      final assignmentId = await _repository.createAssignment(assignment);
      _logger.i("UseCase: Successfully created assignment $assignmentId");
      return assignmentId;
    } on DataNotFoundException catch (e) {
      _logger.e("UseCase: Failed createAssignment - User not found.", error: e);
      rethrow;
    } on InvalidArgumentException catch (e) {
      _logger.e(
        "UseCase: Failed createAssignment - Invalid argument.",
        error: e,
      );
      rethrow;
    } catch (e, stackTrace) {
      _logger.e(
        "UseCase: Unexpected error creating assignment",
        error: e,
        stackTrace: stackTrace,
      );
      throw DomainException("Could not create the nurse assignment.", cause: e);
    }
  }
  // -------------------------------------------

  // --- ADDED deleteAssignment Use Case Method ---
  /// Deletes a specific nurse assignment.
  Future<void> deleteAssignment(String assignmentId) async {
    _logger.d("UseCase: Deleting assignment '$assignmentId'");
    try {
      if (assignmentId.isEmpty) {
        throw InvalidArgumentException("Assignment ID cannot be empty.");
      }
      // Optional: Add business logic here, e.g., check if user has permission to delete
      // final currentUserRole = ...;
      // final assignment = await _repository.getAssignmentById(assignmentId); // Requires getAssignmentById in repo
      // if (currentUserRole != UserRole.doctor && currentUser.id != assignment.doctorId) { ... throw AuthException ...}

      await _repository.deleteAssignment(assignmentId);
      _logger.i("UseCase: Successfully deleted assignment '$assignmentId'");
    } on InvalidArgumentException catch (e) {
      _logger.e(
        "UseCase: Failed deleteAssignment - Invalid argument.",
        error: e,
      );
      rethrow;
    } catch (e, stackTrace) {
      _logger.e(
        "UseCase: Unexpected error deleting assignment '$assignmentId'",
        error: e,
        stackTrace: stackTrace,
      );
      throw DomainException("Could not delete the nurse assignment.", cause: e);
    }
  }

  // -------------------------------------------
}
